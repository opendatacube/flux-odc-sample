apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: ows
  namespace: web
  annotations:
    fluxcd.io/ignore: true   # temporarily make Flux ignore a manifest if set to true
    fluxcd.io/automated: true  # automated deployment of new container images
    fluxcd.io/tag.global: glob:*
    fluxcd.io/tag.wmsConfig: glob:*
spec:
  releaseName: ows
  chart:
    # Helm Charts: https://github.com/opendatacube/datacube-charts/tree/master/stable/datacube
    repository: https://opendatacube.github.io/datacube-charts/charts/
    name: datacube
    version: 0.17.9
  values:
    image:
      # Docker Hub: https://hub.docker.com/r/opendatacube/wms
      # Source Repository: https://github.com/opendatacube/datacube-ows
      registry: docker.io
      tag: "0.10.0"
      repository: opendatacube/wms
      pullPolicy: IfNotPresent
    database:
      database: ows
      host: database.local
      existingSecret: ows
    clusterInfo:
      envName: dev
    minReplicas: 120
    maxReplicas: 200
    wms:
      dockerArgs:
      - "gunicorn"
      - "-b"
      - "0.0.0.0:8000"
      - "-w"
      - "3"
      - "--threads=2"
      - "-k"
      - "gevent"
      - "--timeout"
      - "121"
      - "--pid"
      - "gunicorn.pid"
      - "--log-level"
      - "info"
      - "--worker-tmp-dir"
      - "/dev/shm"
      - "datacube_wms.wsgi"
      enabled: true
      externalPort: 80
      internalPort: 8000
      targetCpu: 250
      resources:
        requests:
          cpu: "130m"
          memory: 1024Mi
        limits:
          memory: 1024Mi
      maxSurge: 25%
      maxUnavailable: 10%
      annotations:
        iam.amazonaws.com/role: dev-eks-datacube-eks-wms
      readinessProbe:
        exec:
          command:
          - "/bin/sh"
          - "-c"
          - "curl --silent 'http://localhost:8000/ping'"
      livenessProbe:
        exec:
          command:
          - "/bin/sh"
          - "-c"
          - "curl --silent 'http://localhost:8000/ping'"
        periodSeconds: 30
      awsCredentialsSecret: owsaccesskey
      additionalEnvironmentVars:
        GDAL_DISABLE_READDIR_ON_OPEN: "EMPTY_DIR"
        CPL_VSIL_CURL_ALLOWED_EXTENSIONS: ".tif"
        GDAL_HTTP_MAX_RETRY: 10
        GDAL_HTTP_RETRY_DELAY: 1
      #   OPENCENSUS_TRACING_ENABLED: true
      #   OPENCENSUS_SAMPLE_RATE: 20
      #   JAEGER_HOSTNAME: "jaeger-agent.opencensus"
      #   JAEGER_PORT: 6831
      #   JAEGER_ENDPOINT: /api/traces
      #   JAEGER_SERVICE_NAME: "ows_ogc"
    wmsConfig:
      # if using docker or configmap
      path: /opt/config/wms
      filename: wms_cfg.py
      # configMap: cfg_map_name
      # url: cfg_url
      image:
        # Docker Hub: https://hub.docker.com/r/geoscienceaustralia/dea-datakube-config
        # Source Repository: https://github.com/GeoscienceAustralia/dea-config
        registry: docker.io
        repository: geoscienceaustralia/dea-datakube-config
        tag: "1.3.24-unstable.10.g4fa6747"
        pullPolicy: IfNotPresent
        src: /opt/dea-config/dev/services/wms/ows/wms_cfg.py
    ingress:
      enabled: true
      hosts:
      - ows.opendatacube.com
      annotations:
        kubernetes.io/ingress.class: merge
        merge.ingress.kubernetes.io/config: merged-ingress
        merge.ingress.kubernetes.io/priority: "9"
    service:
      annotations:
        alb.ingress.kubernetes.io/healthcheck-path: "/ping"
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/success-codes: 200,400
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "15"
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/certificate-arn: {your cert arn here}
        alb.ingress.kubernetes.io/connection-idle-timeout: 180
        alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=120
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_302"}}'
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: nodetype
              operator: NotIn
              values:
              - spot